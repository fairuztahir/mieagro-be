apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: api
    name: api
  spec:
    ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
    - name: "1978"
      port: 1978
      targetPort: 1978
    selector:
      io.kompose.service: api
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: goredis
    name: goredis
  spec:
    ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
    selector:
      io.kompose.service: goredis
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: pgadmin
    name: pgadmin
  spec:
    ports:
    - name: "5454"
      port: 5454
      targetPort: 5454
    selector:
      io.kompose.service: pgadmin
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: proxy
    name: proxy
  spec:
    type: LoadBalancer
    ports:
    - name: "80"
      port: 80
      targetPort: 80
    selector:
      io.kompose.service: proxy
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: web
    name: web
  spec:
    ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
    selector:
      io.kompose.service: web
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: api
    name: api
  spec:
    replicas: 2
    selector:
      matchLabels:
        io.kompose.service: api
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            -f docker-compose.yml convert -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: api
      spec:
        containers:
        - env:
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: fai-secret
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: fai-secret
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: POSTGRES_USER
                name: fai-secret
          image: fairuztahir/gb-api:v0.1.1
          imagePullPolicy: IfNotPresent
          name: api
          ports:
          - containerPort: 5000
          - containerPort: 1978
          resources: {}
          volumeMounts:
          - mountPath: /app
            name: api-data
          - mountPath: /uploads/images
            name: tmp
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: api-data
          persistentVolumeClaim:
            claimName: api-data
        - name: tmp
          persistentVolumeClaim:
            claimName: tmp
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: api-data
    name: api-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: tmp
    name: tmp
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: goredis
    name: goredis
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: goredis
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            -f docker-compose.yml convert -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: goredis
      spec:
        containers:
        - image: redis:6.0.8-alpine
          imagePullPolicy: IfNotPresent
          name: goredis
          ports:
          - containerPort: 6379
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: pgadmin
    name: pgadmin
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: pgadmin
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            -f docker-compose.yml convert -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: pgadmin
      spec:
        containers:
        - env:
          - name: PGADMIN_DEFAULT_EMAIL
            valueFrom:
              secretKeyRef:
                key: PGADMIN_DEFAULT_EMAIL
                name: fai-secret
          - name: PGADMIN_DEFAULT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: PGADMIN_DEFAULT_PASSWORD
                name: fai-secret
          - name: PGADMIN_LISTEN_PORT
            valueFrom:
              secretKeyRef:
                key: PGADMIN_LISTEN_PORT
                name: fai-secret
          image: dpage/pgadmin4
          imagePullPolicy: IfNotPresent
          name: pgadmin
          ports:
          - containerPort: 5454
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: proxy
    name: proxy
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: proxy
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            -f docker-compose.yml convert -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: proxy
      spec:
        containers:
        - image: fairuztahir/gb-proxy:v0.1.1
          imagePullPolicy: IfNotPresent
          name: proxy
          ports:
          - containerPort: 80
          resources: {}
          volumeMounts:
          - mountPath: /app
            name: proxy-data
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: proxy-data
          persistentVolumeClaim:
            claimName: proxy-data
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: proxy-data
    name: proxy-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
  status: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
        -f docker-compose.yml convert -o kubemanifests.yaml
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: web
    name: web
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: web
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe
            -f docker-compose.yml convert -o kubemanifests.yaml
          kompose.version: 1.21.0 (992df58d8)
        creationTimestamp: null
        labels:
          io.kompose.service: web
      spec:
        containers:
        - image: fairuztahir/gb-web:v0.1.1
          imagePullPolicy: IfNotPresent
          name: web
          ports:
          - containerPort: 3000
          resources: {}
          volumeMounts:
          - mountPath: /app
            name: web-data
          - mountPath: /app/node_modules
            name: node-modules
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: web-data
          persistentVolumeClaim:
            claimName: web-data
        - name: node-modules
          persistentVolumeClaim:
            claimName: node-modules
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: web-data
    name: web-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: node-modules
    name: node-modules
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 3Gi
  status: {}
kind: List
metadata: {}

